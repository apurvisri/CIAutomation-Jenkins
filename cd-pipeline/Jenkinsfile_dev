#!/usr/bin/groovy

pipeline {
    agent any 

    options {
        disableConcurrentBuilds()
    }
// 1st goes to this and invoke build function
    stages {
        stage("Build") {
            steps { buildApp() }
        }
// 3rd goes to this stage and invoke deploy function having parameter environment passes value
        stage("Deploy - Dev") {
            steps { deploy('dev') }
        }
    }
}

//Steps

// 2nd build docker image check direc where we have docker file
def buildApp() {
    dir ('cd-pipeline/') {
        // dsl syntax - plugin
        def appImage = docker.build("apurvisri/earthgif:${BUILD_NUMBER}")
    }
}
// this uses parameter which binds with variable in this function
def deploy(environment) {
    // define variable with empty string
    def containerName = ''
    def port = ''

    if ("${environment}" == 'dev') {
        containerName = "app_dev"
        port = "8888"
    }
    else {
        println "Environment is not valid"
        System.exit(0)
    }
    // remove old container running on same port, so remove first and then run container on port 8888
    sh "docker ps -f name=${containerName} -q | xargs docker stop"
    sh "docker ps -a -f name=${containerName} -q | xargs -r docker rm"
    sh "docker run -d -p ${port}:5000 --name ${containerName} apurvisri/earthgif:${BUILD_NUMBER} "
}
