#!/usr/bin/groovy

pipeline {
    agent any 

    options {
        disableConcurrentBuilds()
    }
// This allows to inject env variable to all the stages of the pipeline. PYTHONPATH is the variable to make 
//python modules available from import from any python script    
    environment {
        PYTHONPATH = "${WoRKSPACE}/cd-pipeline"
    }
    
    stages {
// Test the python code with unit test
        stage("Test - Unit tests") {
            steps { runUnittests() }
        }
//Test the Deployment to Dev and stage with User Acceptance test (UAT) 
        stage("Build") {
            steps { buildApp() }
        }
    
        stage("Deploy - Dev") {
            steps { deploy('dev') }
        }

        stage("Test - UAT Dev") {
            steps { runUAT(8888) }
        }

        stage("Deploy - Stage") {
            steps { deploy('stage') }
        }

        stage("Test - UAT Stage") {
            steps { runUAT(88) }
        }
    //This stage invokes the function approve, it uses DSL instruction timeout to set deployment period of 1 day, 
    
        stage("Approve") {
            steps { approve() }
        }
    
        stage("Deploy - Live") {
            steps { deploy('live') }
        }

        stage("Test - UAT Live") {
            steps { runUAT(80) }
        }
    }
}

//Steps

// 2nd build docker image check direc where we have docker file
def buildApp() {
    dir ('cd-pipeline/') {
        // dsl syntax - plugin
        def appImage = docker.build("apurvisri/earthgif:${BUILD_NUMBER}")
    }
}
// this uses parameter which binds with variable in this function
def deploy(environment) {
    // define variable with empty string
    def containerName = ''
    def port = ''

    if ("${environment}" == 'dev') {
        containerName = "app_dev"
        port = "8888"
    }

    else if ("${environment}" == 'stage') {
        containerName = "app_stage"
        port = "88"
    }
    
    else if ("${environment}" == 'live') {
        containerName = "app_live"
        port = "80"
    }

    else {
        println "Environment is not valid"
        System.exit(0)
    }
    // remove old container running on same port, so remove first and then run container on port 8888
    sh "docker ps -f name=${containerName} -q | xargs docker stop"
    sh "docker ps -a -f name=${containerName} -q | xargs -r docker rm"
    sh "docker run -d -p ${port}:5000 --name ${containerName} apurvisri/earthgif:${BUILD_NUMBER} "
}

//this means pipeline will wait for users manual input for for 1 day before aborting the stage and hence pipeline
def approve() {
    timeout(time:1, unit:'DAYS') {
        input('Do you want to deploy to live')
    }
}

def runUnittests() {
    sh "pip install --trusted-host pypi.python.org -r ./cd-pipeline/requirement.txt"
    sh "chmod +x cd-pipeline/tests/test_flask_app.py"
    sh "python ./cd-pipeline/tests/test_flask_app.py"
}

def runUAT(port) {
    sh "chmod +x cd-pipeline/tests/runUAT.sh"
    sh "cd-pipeline/tests/runUAT.sh ${port}"
}
